@page "/note/{Id}"
@using MongoDB.Bson
@using Noting.Models
@using Noting.Services
@inject AuthenticationStateProvider AuthStateProvider
@inject WorkoutNoteService NoteService
@inject ExerciseService ExerciseService
@using System.Security.Claims
@layout MainLayout

@if (!IsLoaded)
{
  <p>Loading…</p>
}
else
{
    <div class="border-b-1 border-divider mx-8 text-center font-semibold">
  <h3 class="pb-4">@Tag</h3>
    </div>
  <textarea
    @bind="NoteText"
    @onblur="SaveNote"
    style="width:100%; height:80vh">
  </textarea>
  <p>@SaveStatus</p>
}


@code {
  [Parameter] public string Tag { get; set; }
   [Parameter] public string Id { get; set; }

  private WorkoutNote? CurrentNote;
  private ObjectId UserId;
  private DateTime Date;
  private string NoteText = "";
  private bool IsLoaded = false;
  private string SaveStatus = "";

  protected override async Task OnInitializedAsync()
  {

        if (!ObjectId.TryParse(Id, out var noteId))
            throw new Exception("Invalid note ID");

        CurrentNote = await NoteService.GetNoteByIdAsync(noteId);
        if (CurrentNote == null)
            throw new Exception("Note not found");

        NoteText = CurrentNote.NoteText;
        UserId = CurrentNote.UserId;
        Date = CurrentNote.Date;
        Tag = CurrentNote.NameTag;
        IsLoaded = true;
  }

    private async Task SaveNote()
    {
        var lines = NoteText
          .Replace("\r\n", "\n")
          .Replace("\r", "\n")
          .Split('\n')
          .Select(l => l.Trim())
          .Where(l => !string.IsNullOrEmpty(l))
          .ToList();

        foreach (var line in lines)
        {
            await ExerciseService.SaveFromText(line, UserId);
        }

        CurrentNote.NoteText = NoteText;
        CurrentNote.Exercises = new List<Exercise>();

        NoteService.SaveNote(CurrentNote);

        SaveStatus = $"Saved at {DateTime.Now:T} ({lines.Count} exercise(s))";
    }
}
