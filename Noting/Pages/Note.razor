@page "/note/{Id}"
@using MongoDB.Bson
@using Noting.Models
@using Noting.Services
@inject AuthenticationStateProvider AuthStateProvider
@inject WorkoutNoteService NoteService
@inject ExerciseService ExerciseService
@using System.Security.Claims
@layout MainLayout
@inject IJSRuntime JS
@inject AppState AppState


    <div class="border-b-2 alig border-divider mx-8 text-center font-semibold">
    <input class="text-center text-2xl font-semibold focus:outline-none pb-4"
               @bind="Tag"
               @bind:event="oninput"
               @onblur="SaveTag" />
    </div>
    <div class="mx-8 my-2 relative">
    <textarea @bind="NoteText"
              @bind:event="oninput"
              @onblur="SaveNote"
              class="w-full h-[80vh] p-4
           bg-white border border-gray-200 rounded-lg
           shadow-sm placeholder-gray-400 font-raleway text-lg
           focus:outline-none focus:ring-1 focus:ring-red-500
           focus:border-highlight resize-none">
  </textarea>

    <div class="absolute bottom-2 right-2 z-10
              bg-white p-2 rounded-lg shadow-md flex items-center space-x-1">
        <label for="editDate" class="text-gray-600 text-sm">Date:</label>
        <input id="editDate"
               type="datetime-local"
               @bind="NoteDate"
               @bind:event="oninput"
               @onchange="SaveDate"
               class="text-sm focus:outline-none" />
    </div>
</div>

<p class="mx-8 text-sm text-gray-500">@SaveStatus</p>

@code {
    [Parameter] public string Id { get; set; }

    private WorkoutNote CurrentNote;
    private ObjectId UserId;
    private string Tag;
    private string NoteText = "";
    private bool IsLoaded = false;
    private string SaveStatus = "";

    private DateTime NoteDate;

    protected override async Task OnParametersSetAsync()
    {
        IsLoaded = false;
        SaveStatus = "";

        if (!ObjectId.TryParse(Id, out var noteId))
            throw new Exception("Invalid note ID");

        CurrentNote = await NoteService.GetNoteByIdAsync(noteId);
        if (CurrentNote == null)
            throw new Exception("Note not found");

        NoteDate = CurrentNote.Date.LocalDateTime;
        Tag      = CurrentNote.NameTag;
        NoteText = CurrentNote.NoteText;
        UserId   = CurrentNote.UserId;
        IsLoaded = true;
    }

    private async Task SaveDate()
    {
        CurrentNote.Date = new DateTimeOffset(NoteDate, DateTimeOffset.Now.Offset);
        NoteService.SaveNote(CurrentNote);
        SaveStatus = $"Date saved at {DateTime.Now:T}";
        AppState.RaiseNotesChanged();
    }

    private async Task SaveTag()
    {
        if (CurrentNote.NameTag != Tag)
        {
            CurrentNote.NameTag = Tag;
            NoteService.SaveNote(CurrentNote);
            SaveStatus = $"Tag saved at {DateTime.Now:T}";
            AppState.RaiseNotesChanged();
        }
    }

    private async Task SaveNote()
    {
        var iso = await JS.InvokeAsync<string>("getClientTime");

        CurrentNote.NoteText = NoteText;

        var lines = NoteText
          .Replace("\r\n", "\n")
          .Replace("\r", "\n")
          .Split('\n')
          .Select(l => l.Trim())
          .Where(l => l.Length > 0)
          .ToList();

        var oldIds = CurrentNote.ExerciseIds;
        var newIds = new List<ObjectId>();

        for (int i = 0; i < lines.Count; i++)
        {
            ObjectId? id = i < oldIds.Count ? oldIds[i] : (ObjectId?) null;
            var ex = await ExerciseService.SaveFromText(
                lines[i],
                UserId,
                CurrentNote.Date,
                id);
            newIds.Add(ex.Id);
        }

        CurrentNote.ExerciseIds = newIds;
        NoteService.SaveNote(CurrentNote);

        SaveStatus = $"Saved at {DateTime.Now:T} ({lines.Count} exercises)";
    }
}
