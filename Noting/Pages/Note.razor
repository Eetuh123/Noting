@page "/note/{Id}"
@using MongoDB.Bson
@using Noting.Models
@using Noting.Services
@inject AuthenticationStateProvider AuthStateProvider
@inject WorkoutNoteService NoteService
@inject ExerciseService ExerciseService
@using System.Security.Claims
@layout MainLayout

@if (!IsLoaded)
{
    <p>Loading…</p>
}
else
{
    <div class="border-b-1 border-divider mx-8 text-center font-semibold">
        <input class="text-xl font-semibold focus:outline-none"
               @bind="Tag"
               @bind:event="oninput"
               @onblur="SaveTag" />
    </div>

    <textarea @bind="NoteText"
              @onblur="SaveNote"
              style="width:100%; height:80vh">
      </textarea>
    <p>@SaveStatus</p>
}

@code {
    [Parameter] public string Id { get; set; }

    private WorkoutNote CurrentNote;
    private ObjectId UserId;
    private string Tag;
    private string NoteText = "";
    private bool IsLoaded = false;
    private string SaveStatus = "";

    protected override async Task OnInitializedAsync()
    {
        if (!ObjectId.TryParse(Id, out var noteId))
            throw new Exception("Invalid note ID");

        CurrentNote = await NoteService.GetNoteByIdAsync(noteId);
        if (CurrentNote == null)
            throw new Exception("Note not found");

        Tag = CurrentNote.NameTag;
        NoteText = CurrentNote.NoteText;
        UserId = CurrentNote.UserId;
        IsLoaded = true;
    }

    private async Task SaveTag()
    {
        if (CurrentNote.NameTag != Tag)
        {
            CurrentNote.NameTag = Tag;
            NoteService.SaveNote(CurrentNote);
            SaveStatus = $"Tag saved at {DateTime.Now:T}";
            StateHasChanged();
        }
    }

    private async Task SaveNote()
    {
        var lines = NoteText
          .Replace("\r\n", "\n")
          .Replace("\r", "\n")
          .Split('\n')
          .Select(l => l.Trim())
          .Where(l => l.Length > 0)
          .ToList();

        var ids = new List<ObjectId>();

        foreach (var line in lines)
        {
            var ex = await ExerciseService.SaveFromText(line, UserId);
            ids.Add(ex.Id);
        }

        CurrentNote.ExerciseIds = ids;
        NoteService.SaveNote(CurrentNote);

        SaveStatus = $"Saved at {DateTime.Now:T} ({ids.Count} exercises)";
    }
}