@using Noting.Models
@using Noting.Services
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Authorization
@using MongoDB.Bson
@using System.Security.Claims
@inject WorkoutNoteService NoteService
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavManager
@inject IJSRuntime JS
@inject AppState AppState

<nav class="mb-4 border-b-1">
    <ul class="flex space-x-4">
        <li><NavLink href="/" Match="NavLinkMatch.All">Home</NavLink></li>
        <li><button @onclick="ToggleSearch">Search</button></li>
        <li><button @onclick="CreateNewNote">New Note</button></li>
        <li><NavLink href="/graphs" Match="NavLinkMatch.Prefix">Graphs</NavLink></li>
        <li><a href="/auth/logout">Logout</a></li>
    </ul>
</nav>

@if (_isSearchVisible)
{
    <div class="fixed inset-0" @onclick="ToggleSearch"></div>
    <div class="absolute inset-0 m-auto h-fit z-20" @onclick:stopPropagation>
        <div class="max-w-xl mx-auto">
            <SearchBar OnSearchChanged="ApplyFilters" />
        </div>
    </div>
}

<div class="bg-surface-main shadow rounded-lg p-4 divide-y divide-gray-200 h-screen overflow-y-auto">
    @if (!Sections.Any())
    {
        <p class="text-center text-gray-500">No notes yet.</p>
    }
    else
    {
        @foreach (var part in Sections)
        {
            <div>
                <h5 class="text-gray-700 uppercase text-xs font-semibold px-4 py-2">
                    @part.Title
                </h5>
                <ul class="list-none m-0 p-0">
                    @foreach (var note in part.Notes)
                    {
                        var url = $"/note/{note.Id}";
                        var isActive = NavManager.Uri.EndsWith(url);
                        var linkClass = isActive
                        ? "block px-3 text-white bg-blue-600 rounded"
                        : "block px-3 text-gray-900";

                        <li class="py-2 hover:bg-gray-50 rounded transition-colors">
                            <a class="@linkClass" href="@url">
                                @note.NameTag @note.Date.Date.ToString("dd.MM.yyyy")
                            </a>
                        </li>
                    }
                </ul>
            </div>
        }
    }
</div>

@code {
    private bool _isSearchVisible;
    private ObjectId _userId;
    private List<WorkoutNote> _allNotes = new();
    private List<Section> Sections = new();

    protected override async Task OnInitializedAsync()
    {
        NavManager.LocationChanged += HandleLocationChanged;
        AppState.NotesChanged += OnNotesChanged;
        await LoadNotes();
    }

    private async void OnNotesChanged()
    {
        await InvokeAsync(async () =>
        {
            await LoadNotes();
            StateHasChanged();
        });
    }

    private async Task LoadNotes()
    {
        var auth = await AuthStateProvider.GetAuthenticationStateAsync();
        var idStr = auth.User.FindFirstValue(ClaimTypes.NameIdentifier);
        if (!ObjectId.TryParse(idStr, out var userId))
            return;
        _userId = userId;

        _allNotes = await NoteService.GetNotesForUserAsync(_userId);
        Sections = BuildSections(_allNotes);
    }

    private async Task CreateNewNote()
    {
        var iso = await JS.InvokeAsync<string>("getClientTime");
        var client = DateTimeOffset.Parse(iso);

        var note = new WorkoutNote
            {
                UserId = _userId,
                Date = client,
                NameTag = "New Note",
                NoteText = "",
                Exercises = new List<Exercise>()
            };

        note = NoteService.SaveNote(note);

        _allNotes = await NoteService.GetNotesForUserAsync(_userId);
        Sections = BuildSections(_allNotes);

        NavManager.NavigateTo($"/note/{note.Id}");
    }

    private void ApplyFilters(List<string> terms)
    {
        var q = _allNotes.AsEnumerable();

        var dateTokens = terms
          .Select(t => (raw: t, ok: DateTime.TryParse(t, out var dt) ? (DateTime?)dt.Date : null))
          .Where(x => x.ok.HasValue)
          .Select(x => x.ok.Value)
          .Distinct();

        foreach (var dt in dateTokens)
            q = q.Where(n => n.Date.Date == dt);

        // name tokens
        var nameTokens = terms.Except(dateTokens.Select(d => d.ToShortDateString()));
        foreach (var nt in nameTokens)
            q = q.Where(n => n.NameTag.Contains(nt, StringComparison.OrdinalIgnoreCase));

        Sections = BuildSections(q.ToList());
        StateHasChanged();
    }

    private List<Section> BuildSections(List<WorkoutNote> notes)
    {
        var sections = new List<Section>();
        var today = DateTimeOffset.Now.Date;

        // Today
        var todayNotes = notes
          .Where(n => n.Date.Date == today)
          .OrderBy(n => n.Date)
          .ToList();
        if (todayNotes.Any())
            sections.Add(new Section { Title = "Today", Notes = todayNotes });

        // Past 30 days
        var past30 = notes
          .Where(n => n.Date.Date >= today.AddDays(-30) && n.Date.Date < today)
          .OrderBy(n => n.Date)
          .ToList();
        if (past30.Any())
            sections.Add(new Section { Title = "Past 30 days", Notes = past30 });

        // Older, grouped by month/year
        var earlier = notes
          .Where(n => n.Date.Date < today.AddDays(-30))
          .GroupBy(n => n.Date.ToString("MMMM yyyy"))
          .OrderBy(g => DateTimeOffset.ParseExact(g.Key, "MMMM yyyy", null));
        foreach (var grp in earlier)
        {
            sections.Add(new Section
                {
                    Title = grp.Key,
                    Notes = grp.OrderBy(n => n.Date).ToList()
                });
        }

        return sections;
    }

    private void ToggleSearch() => _isSearchVisible = !_isSearchVisible;

    private void HandleLocationChanged(object? _, Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs __)
      => StateHasChanged();

    public void Dispose()
    {
        NavManager.LocationChanged -= HandleLocationChanged;
        AppState.NotesChanged -= OnNotesChanged;
    }

    private class Section
    {
        public string Title { get; set; } = default!;
        public List<WorkoutNote> Notes { get; set; } = new();
    }
}
