@page "/notes"
@implements IDisposable
@using Microsoft.AspNetCore.Components.Authorization
@using MongoDB.Bson
@using Noting.Models
@using Noting.Services
@using System.Security.Claims
@inject WorkoutNoteService NoteService
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavManager

<nav class="mb-4 border-b-1">
    <ul class="flex space-x-4">
        <li><NavLink href="/" Match="NavLinkMatch.All">Home</NavLink></li>
        <li><button @onclick="ToggleSearch">Search</button></li>
        <li><NavLink href="/graphs" Match="NavLinkMatch.Prefix">Graphs</NavLink></li>
        <li><a href="/auth/logout">Logout</a></li>
    </ul>
</nav>

@if (_isSearchVisible)
{
    <SearchBar />
}

<div class="bg-surface-main shadow rounded-lg p-4 divide-y divide-gray-200 h-screen overflow-y-auto">
    @if (!Sections.Any())
    {
        <p class="text-center text-gray-500">No notes yet.</p>
    }
    else
    {
        @foreach (var part in Sections)
        {
            <div>
                <h5 class="text-gray-700 uppercase text-xs font-semibold px-4 py-2">
                    @part.Title
                </h5>
                <ul class="list-none m-0 p-0">
                    @foreach (var note in part.Notes)
                    {
                        var url = $"/note/{note.Id}";
                        var isActive = NavManager.Uri.EndsWith(url);
                        var linkClass = isActive
                        ? "block px-3 text-white bg-blue-600 rounded"
                        : "block px-3 text-gray-900";

                        <li class="py-2 hover:bg-gray-50 rounded transition-colors">
                            <a class="@linkClass" href="@url">
                                @note.NameTag (@note.Date.ToShortDateString())
                            </a>
                        </li>
                    }
                </ul>
            </div>
        }
    }
</div>

@code {
    private bool _isSearchVisible;

    private class Section
    {
        public string Title { get; set; }
        public List<WorkoutNote> Notes { get; set; }
    }

    private List<Section> Sections = new();

    protected override async Task OnInitializedAsync()
    {
        NavManager.LocationChanged += HandleLocationChanged;

        var auth = await AuthStateProvider.GetAuthenticationStateAsync();
        var idStr = auth.User.FindFirstValue(ClaimTypes.NameIdentifier);
        if (!ObjectId.TryParse(idStr, out var userId))
            return;

        var allNotes = await NoteService.GetNotesForUserAsync(userId);
        if (allNotes == null || !allNotes.Any())
            return;

        var today = DateTime.Today;

        // “Today”
        var todayNotes = allNotes
            .Where(n => n.Date.Date == today)
            .OrderByDescending(n => n.Date)
            .ToList();
        if (todayNotes.Any())
            Sections.Add(new Section { Title = "Today", Notes = todayNotes });

        // “Past 30 days”
        var past30 = allNotes
            .Where(n => n.Date.Date >= today.AddDays(-30) && n.Date.Date < today)
            .OrderByDescending(n => n.Date)
            .ToList();
        if (past30.Any())
            Sections.Add(new Section { Title = "Past 30 days", Notes = past30 });

        // Older, grouped by “MMMM yyyy”
        var earlier = allNotes
            .Where(n => n.Date.Date < today.AddDays(-30))
            .GroupBy(n => n.Date.ToString("MMMM yyyy"))
            .OrderByDescending(g => DateTime.ParseExact(g.Key, "MMMM yyyy", null));
        foreach (var grp in earlier)
        {
            Sections.Add(new Section
                {
                    Title = grp.Key,
                    Notes = grp.OrderByDescending(n => n.Date).ToList()
                });
        }
    }

    private void ToggleSearch() => _isSearchVisible = !_isSearchVisible;

    private void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        StateHasChanged();
    }

    public void Dispose()
    {
        NavManager.LocationChanged -= HandleLocationChanged;
    }
}
