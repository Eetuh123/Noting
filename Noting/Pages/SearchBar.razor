@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web

<div class="flex items-center space-x-2 bg-gray-100 rounded-lg shadow-lg p-2 bg-surface-main">
    <svg xmlns="http://www.w3.org/2000/svg"
         class="w-6 h-6 fill-highlight hover:cursor-pointer"
         fill="currentColor"
         viewBox="0 0 24 24">
        <path d="M23.707,22.293l-5.969-5.969a10.016,10.016,0,1,0-1.414,1.414l5.969,5.969a1,1,0,0,0,1.414-1.414ZM10,18a8,8,0,1,1,8-8A8.009,8.009,0,0,1,10,18Z" />
    </svg>

    @foreach (var term in Terms)
    {
        <span class="flex bg-surface-muted items-center text-surface-main text-sm font-bold px-3 py-1 rounded-full cursor-pointer"
              @onclick="() => RemoveTerm(term)">
            @term
        </span>
    }

    <input class="flex-1 bg-transparent focus:outline-none px-2 py-1 text-gray-900"
           placeholder="Type to search…"
           @bind="CurrentEntry"
           @bind:event="oninput"
           @onkeydown="OnKeyDown" />
</div>

@code {
    [Parameter] public EventCallback<List<string>> OnSearchChanged { get; set; }
    [Parameter] public List<string> InitialTerms { get; set; }

    private List<string> Terms = new();
    private string CurrentEntry = "";

    protected override void OnParametersSet()
    {
        Terms = InitialTerms?.ToList() ?? new List<string>();
    }

    protected override void OnInitialized()
    {
        Terms = InitialTerms.ToList();
    }

    private void OnKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(CurrentEntry))
        {
            var t = CurrentEntry.Trim();
            if (!Terms.Contains(t, StringComparer.OrdinalIgnoreCase))
                Terms.Add(t);
            CurrentEntry = "";
            OnSearchChanged.InvokeAsync(Terms.ToList());
        }
    }

    private void RemoveTerm(string t)
    {
        Terms.RemoveAll(x => x.Equals(t, StringComparison.OrdinalIgnoreCase));
        OnSearchChanged.InvokeAsync(Terms.ToList());
    }
}
