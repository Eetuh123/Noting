@page "/graphs"
@using Noting.Services
@inject ExerciseService ExerciseService
@inject AuthenticationStateProvider AuthStateProv
@layout MainLayout


    <div class="border-b-2 alig border-divider mx-8 text-center font-semibold">
    <div class="text-center text-2xl font-semibold focus:outline-none pb-4"
    <h1>Charts</h1>
    </div>
    </div>
<div class="space-y-6 px-4 sm:px-6 lg:px-8 py-6">

    <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <div class="bg-white rounded-lg shadow p-4">
            <h2 class="text-xl font-semibold mb-4">All</h2>
            <iframe src="/chart/all" class="w-full h-64" loading="lazy"></iframe>
        </div>
        <div>
            <ExerciseTable />
        </div>
    </div>

    <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
        @foreach (var name in _exerciseNames ?? Enumerable.Empty<string>())
        {
            <div class="h-80 bg-white rounded-lg shadow p-4">
                <h2 class="text-xl font-semibold mb-4">@name</h2>
                <iframe src="@($"/chart/{Uri.EscapeDataString(name)}")"
                        class="w-full h-full"
                        loading="lazy">
                </iframe>
            </div>
        }
    </div>
</div>

@code {
    private List<string>? _exerciseNames;

    protected override async Task OnInitializedAsync()
    {
        var user = (await AuthStateProv.GetAuthenticationStateAsync()).User;
        var entries = await ExerciseService.GetAllForCurrentUser();
        _exerciseNames = entries
          .Select(e => e.NameTag)
          .Distinct(StringComparer.OrdinalIgnoreCase)
          .OrderBy(n => n)
          .ToList();
    }
}
